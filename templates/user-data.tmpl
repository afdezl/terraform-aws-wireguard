#cloud-config

package_update: true
package_upgrade: true

apt_sources:
  - source: "ppa:wireguard/wireguard"

packages:
  - wireguard-dkms
  - wireguard-tools
  - awscli
  - python3-boto3
  - qrencode

write_files:
  - path: /etc/wireguard/wg0.conf
    content: ""
  - path: /opt/wireguard/wg_config_creator.py
    content: |
      #!/usr/bin/env python3

      import boto3
      import json
      import sys
      import urllib3

      from typing import List, Dict


      WG_TEMPLATE = """
      [Interface]
      Address = 192.168.2.1
      PrivateKey = ${wg_server_private_key}
      ListenPort = 51820
      PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

      {peers}
      """

      WG_PEER_TEMPLATE = """
      [Peer]
      PublicKey  = {public_key}
      AllowedIPs = {ip}
      """

      def instance_region():
          http = urllib3.PoolManager()
          r = http.request("GET", "http://169.254.169.254/latest/dynamic/instance-identity/document")
          metadata = json.loads(r.data)
          return metadata['region']


      def get_peers() -> List[Dict]:
          ssm = boto3.client("ssm", region_name=instance_region())
          parameters = ssm.get_parameters_by_path(
              Path='/wireguard',
              Recursive=True,
              WithDecryption=True
          )['Parameters']

          peers = []
          for parameter in parameters:
              if parameter['Name'] == "/wireguard/peers":
                  peers = json.loads(parameter['Value'])
                  break

          return peers


      def render_peers(peers: List) -> str:
          rendered_peers = "".join([
              WG_PEER_TEMPLATE.format(public_key=peer['public_key'], ip=peer['ip']) for peer in peers
          ])
          return rendered_peers


      def generate_wg_config():
          peers = get_peers()
          print(WG_TEMPLATE.format(peers=render_peers(peers)))


      if __name__ == "__main__":
          generate_wg_config()

runcmd:
%{ if eip_id }
  - export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
  - export REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep -oP '\"region\"[[:space:]]*:[[:space:]]*\"\K[^\"]+')
  - aws --region $${REGION} ec2 associate-address --allocation-id ${eip_id} --instance-id $${INSTANCE_ID}
%{endif}
  - chown -R root:root /etc/wireguard/
  - chmod -R og-rwx /etc/wireguard/*
  - sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
  - sysctl -p
  - ufw allow ssh
  - ufw allow 51820/udp
  - ufw --force enable
  - python3 /opt/wireguard/wg_config_creator.py > /etc/wireguard/wg0.conf
  - systemctl enable wg-quick@wg0.service
  - systemctl start wg-quick@wg0.service
